" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'json', 'nginx', 'golang', 'ruby', 'less', 'php', 'coffeescript', 'shell', 'scala']
    let g:bundle_groups=['thrift', 'golang', 'python', 'json', 'yaml', 'Jenkinsfile', 'terraform', 'mustache', 'Dockerfile', 'markdown']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" add by ffz
"command-line fuzzy finder
" 在 mac 上，先用 brew install fzf, 然后 Plug ‘/usr/local/opt/fzf’
Plug '/usr/local/opt/fzf'
" 如果不在 mac 上，可以用 Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" 4.18
" Plug 'Chiel92/vim-autoformat'

" add by ffz
" color schemes
Plug 'rakr/vim-one'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'tomasr/molokai'

" add by ffz
" provide file icons
" Plug 'Yggdroot/indentLine'
" let g:indentLine_setConceal = 0

" add by ffz
" provide file icons
" Plug 'ryanoasis/vim-devicons'
"
" add by ffz
" integrate wish dash.app for better API searching
" Plug 'rizzatti/dash.vim'

" syntastic
" Plug 'dense-analysis/ale'

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" auto complete
" coc 是一个 language client，负责跟 language server 通信
" coc 提供的一些跟某个语言相关的插件，这些插件就是配置好的 language servers
" 比如 coc-python，coc-go，coc-yaml
" 都是用于提供相应语言的开箱即用的 language server
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" add by ffz 2020.11.24
Plug 'antoinemadec/coc-fzf', {'branch': 'release'}
" 2020.11.24

" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'

" 快速注释
Plug 'scrooloose/nerdcommenter'

" 快速加入修改环绕字符, 引号等
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'

" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'

" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'

" quick movement
" easymotion
"更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

" 成对标签跳转
Plug 'vim-scripts/matchit.zip'

" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'

" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'

" quick run
" quickrun
Plug 'thinca/vim-quickrun'

" git
" fugitive
Plug 'tpope/vim-fugitive'

" signify 用来显示文件中的修改状态
Plug 'mhinz/vim-signify'

" view
" airline
" 状态栏增强展示
" Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" rainbow
" 增强版括号显示，improved kien/rainbow_parentheses.vim
Plug 'luochen1990/rainbow'

" nav
" 文件树
" nerdtree nerdtreetabs
Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin'

" tagbar
Plug 'majutsushi/tagbar'

" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'

if count(g:bundle_groups, 'markdown')
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
endif

if count(g:bundle_groups, 'thrift')
    Plug 'solarnz/thrift.vim'
endif

if count(g:bundle_groups, 'golang')
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
    " vim-go {{{
    "
    " disable vim-go :GoDef short cut (gd)
    " this is handled by LanguageClient: coc
    let g:go_def_mapping_enabled = 0
    "
    " format with goimports instead of gofmt
    let g:go_fmt_command = "goimports"
    let g:go_addtags_transform = "camelcase"
    let g:go_autodetect_gopath = 1
    let g:go_list_type = "quickfix"

    let g:go_version_warning = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1

    let g:godef_split=2

    " let g:go_auto_sameids = 1

    let g:go_fmt_fail_silently = 1
    " let g:go_auto_type_info = 1
    " use <leader>gi to show go types
    " nnoremap <Leader>gi :GoInfo<CR>
    "
    " use <leader>gt to show go types
    nnoremap <Leader>gt :GoTest<CR>

    " add by ffz 2021-02-20 19:16
    " show indent line when using Yggdroot/indentLine
    " https://github.com/Yggdroot/indentLine/issues/210
    " set list lcs=tab:\¦\ 
    " }}}
endif

if count(g:bundle_groups, 'scala')
    Plug 'derekwyatt/vim-scala'
    au BufRead,BufNewFile *.sbt set filetype=scala
endif

if count(g:bundle_groups, 'ruby')
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-rails'
    " dir / dar
    Plug 'nelstrom/vim-textobj-rubyblock'

    " 有bug, 和当前有冲突, 尚未解决, 不要打开 => TODO: solve this problem
    " Plug 'tpope/vim-endwise'
endif

if count(g:bundle_groups, 'Jenkinsfile')
    " add by ffz
    " recognize Jenkinsfile as a groovy script
    Plug 'martinda/Jenkinsfile-vim-syntax'
endif

if count(g:bundle_groups, 'terraform')
    " add by ffz
    " plugin for terraform
    Plug 'hashivim/vim-terraform'
    let g:terraform_align=1
    let g:terraform_fold_sections=1
    let g:terraform_commentstring='//%s'
    let g:terraform_fmt_on_save=1
endif

if count(g:bundle_groups, 'mustache')
    " add by ffz
    " plugin for universe package marathon mustache template
    Plug 'mustache/vim-mustache-handlebars'
endif

if count(g:bundle_groups, 'Dockerfile')
    " add by ffz
    " plugin for Dockerfile
    Plug 'ekalinin/Dockerfile.vim'
endif

if count(g:bundle_groups, 'javascript')
    " javascript
    " 注意: syntax这个插件要放前面
    Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
    " Plug 'jelera/vim-javascript-syntax' | Plug 'pangloss/vim-javascript'

    " TODO: jquery? for, remove or keep
    Plug 'othree/javascript-libraries-syntax.vim'
    let g:used_javascript_libs = 'jquery,underscore,backbone'

    " for javascript 自动补全, 配合YCM, 需要安装全局环境的（非nvm中) node.js&npm
    " 安装完成后还需要在 bundle/tern_for_vim 下执行 npm install 安装依赖 `cd ~/.vim/bundle/tern_for_vim && npm install`
    " see https://github.com/marijnh/tern_for_vim
    Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
endif

" Add plugins to &runtimepath
call plug#end()

" ################### 自动补全 ###################
" coc {{{
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" update by ffz, 2020.12.24
" use tab for trigger completion, completion confirm, snippet expand and jump like VSCode.
" check coc-snipp doc
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" " Use <leader>x for convert visual selected code to snippet
xmap <leader>x <Plug>(coc-convert-snippet)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<C-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<C-k>'
" end 2020.12.24

" update by ffz, use ctrl + j/k to move up/down when choosing a completion item
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" open yank list
nnoremap <silent> <leader>ya  :<C-u>CocList -A --normal yank<cr>

" diagnostics
nmap <silent> <Leader>ep <Plug>(coc-diagnostic-prev)
nmap <silent> <Leader>en <Plug>(coc-diagnostic-next)
nnoremap <silent> <Leader>es :CocDiagnostics<CR>

" GoTo code navigation.
nmap <leader>jd <Plug>(coc-definition)
nmap <leader>jt <Plug>(coc-type-definition)
nmap <leader>ji <Plug>(coc-implementation)
nmap <leader>jr <Plug>(coc-references)
" usage:
" go the difinition with vsplit if the definition is in another file
" and if the definition is just in the same file, then only move the cursor
" check this article
" https://ramgo.li/posts/coc.nvim_split_if_not_open/
" and the github issue: https://github.com/neoclide/coc.nvim/issues/586, 
" check the comment: https://github.com/neoclide/coc.nvim/issues/586#issuecomment-701711012
function! SplitIfNotOpen(...)
    let fname = a:1
    let call = ''
    if a:0 == 2
	let fname = a:2
	let call = a:1
    endif
    let bufnum=bufnr(expand(fname))
    let winnum=bufwinnr(bufnum)
    if winnum != -1
	" Jump to existing split
	exe winnum . "wincmd w"
    else
	" Make new split as usual
	exe "vsplit " . fname
    endif
    " Execute the cursor movement command
    exe call
endfunction

command! -nargs=+ CocSplitIfNotOpen :call SplitIfNotOpen(<f-args>)

" add by ffz, 2020.11.24
" let g:coc_fzf_preview = ''
let g:coc_fzf_opts = []
" end 2020.11.24

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" update by ffz 2021-02-18 08:51, use coc.preference.formatOnSaveFileTypes
" Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')

" update by ffz 2021-02-18 08:51, use coc.preference.formatOnSaveFileTypes
" auto formating when saving, modified by ffz
" let blacklist = ['html.mustache', 'template', 'md', 'markdown.mkd']
" let whitelist = ['go', 'py', 'yaml', 'json']
" au BufWrite * if index(whitelist, &ft) >= 0 | call CocAction('format')

" applying codeaction to the selected region.
" example: `<leader>aap` for current paragraph
xmap <leader>ac  <plug>(coc-codeaction-selected)
nmap <leader>ac  <plug>(coc-codeaction-selected)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>fix  <Plug>(coc-fix-current)
" }}}


" ultisnips & vim-snippets{{{
" update by ffz, 2020.11.24
" 取消vim-snippets 的 tab 键位映射, 让给 coc，这样 utilsnips & vim-snippets 只提供 code snippets
let g:UltiSnipsExpandTrigger="<Nop>"
" 键位映射都只由 coc-snippets 负责
" end 2020.11.24
" update by ffz, 2021.06.01
let g:snips_author = 'lingfeng'
" end 2020.06.01
" }}}


" ################### 快速编码 ###################

" nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
" let g:NERDCommentEmptyLines = 1
" let g:NERDTrimTrailingWhitespace = 1
let g:NERDAltDelims_python = 1
" }}}

" trailing-whitespace {{{
map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
vmap <Leader>ga <Plug>(EasyAlign)
nmap <Leader>ga <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" Default:
" If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quick-scope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" macvim/gvim会有问题, 暂时注解
" let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
" let g:qs_first_occurrence_highlight_color = 155       " terminal vim
" let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
" let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" Extend the global default
if exists("*expand_region#custom_text_objects")
    call expand_region#custom_text_objects({
                \ 'a]' :1,
                \ 'ab' :1,
                \ 'aB' :1,
                \ 'ii' :0,
                \ 'ai' :0,
                \ })
endif

" }}}

" multiplecursors {{{
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlsf {{{
nmap \ <Plug>CtrlSFCCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
            \ "open"  : "<Space>",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-J>",
            \ "prev"  : "<C-K>",
            \ "pquit" : "q",
            \ }
" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" fugitive {{{
" :Gdiff  :Gstatus :Gvsplit
nnoremap <leader>gd :Gdiff<CR>
" }}}

" ################### 显示增强 ###################

" airline {{{
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" for coc, added by ffz
" enable/disable coc integration
let g:airline#extensions#coc#enabled = 1
" change error symbol
let airline#extensions#coc#error_symbol = 'E:'
" change warning symbol
let airline#extensions#coc#warning_symbol = 'W:'
" change error format
let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
" change warning format
let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'
" end

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" }}}



" rainbow {{{
let g:rainbow_active = 1
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtree-git-plugin {{{
map <leader>n :NERDTreeToggle<CR>
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '__pycache__']
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
"modify by ffz"
"prevents NERDTree from hiding when first selecting a file."
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"modify by ffz
" let g:NERDTreeWinSize=30
" Anchor file in tree "
nmap <Leader>a :NERDTreeFind<CR>
"end
"
" nerdtree-git-plugin
" let g:NERDTreeGitStatusShowClean = 1
" let g:NERDTreeGitStatusConcealBrackets = 1
" }}}


" 标签导航
" tagbar {{{
let g:tagbar_autofocus = 1
" let g:tagbar_autoshowtag = 1
" let g:tagbar_show_visibility = 1

" add by ffz, 使用<leader>t 快速跳转到tagbar具体位置, 2021.07.22
noremap <silent> <Leader>t :TagbarOpen fj<cr>
" end 2021.07.22

" add by ffz, 2021-07-22
" by default tagbar will be sorted according to name, so disable it
let g:tagbar_sort = 0
" end 2021-07-22


" go语言的tagbar配置
" 1. install gotags 'go get -u github.com/jstemmer/gotags'
" 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
" for gotags. work with tagbar
let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }
" }}}

" quickrun {{{
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
" }}}

"------------------------------------------- end of configs --------------------------------------------
